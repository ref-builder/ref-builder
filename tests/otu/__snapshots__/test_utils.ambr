# serializer version: 1
# name: TestAssignRecordsToSegments.test_names_not_in_plan[223262]
  'Segment names present in records, but not found in plan: RNA N5, RNA Y9.'
# ---
# name: TestAssignRecordsToSegments.test_names_not_in_plan[438782]
  'Segment names present in records, but not found in plan: DNA I, DNA V1, DNA W3, RNA N5, RNA Y9, cRNA I.'
# ---
# name: TestAssignRecordsToSegments.test_ok[223262]
  dict({
    'DNA A': dict({
      'accession_version': 'NC_907439',
      'source_segment': 'DNA A',
    }),
    'DNA B': dict({
      'accession_version': 'K93863',
      'source_segment': 'DNA B',
    }),
  })
# ---
# name: TestAssignRecordsToSegments.test_ok[438782]
  dict({
    'DNA C': dict({
      'accession_version': 'NC_907439',
      'source_segment': 'DNA C',
    }),
    'DNA M': dict({
      'accession_version': 'K93863',
      'source_segment': 'DNA M',
    }),
    'DNA N': dict({
      'accession_version': 'GG223149',
      'source_segment': 'DNA N',
    }),
    'DNA R': dict({
      'accession_version': 'NC_934447',
      'source_segment': 'DNA R',
    }),
    'DNA S': dict({
      'accession_version': 'NC_404705',
      'source_segment': 'DNA S',
    }),
    'DNA U3': dict({
      'accession_version': 'NC_761067',
      'source_segment': 'DNA U3',
    }),
  })
# ---
# name: TestCreatePlanFromRecords.test_monopartite
  dict({
    'id': UUID,
    'segments': list([
      dict({
        'id': UUID,
        'length': 7424,
        'length_tolerance': 0.03,
        'name': None,
        'rule': 'required',
      }),
    ]),
  })
# ---
# name: TestCreatePlanFromRecords.test_multipartite
  dict({
    'id': UUID,
    'segments': list([
      dict({
        'id': UUID,
        'length': 1015,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'C',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
      dict({
        'id': UUID,
        'length': 1074,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'M',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
      dict({
        'id': UUID,
        'length': 1090,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'N',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
      dict({
        'id': UUID,
        'length': 1099,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'R',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
      dict({
        'id': UUID,
        'length': 1087,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'S',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
      dict({
        'id': UUID,
        'length': 1057,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'U3',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
    ]),
  })
# ---
