# serializer version: 1
# name: TestAssignRecordsToSegments.test_names_not_in_plan[223262]
  'Segment names not found in plan: DNA 1.'
# ---
# name: TestAssignRecordsToSegments.test_names_not_in_plan[438782]
  'Segment names not found in plan: DNA 1.'
# ---
# name: TestAssignRecordsToSegments.test_ok[223262]
  set({
    tuple(
      SegmentName(prefix='DNA', key='A'),
      'NC_907439',
      'DNA A',
    ),
    tuple(
      SegmentName(prefix='DNA', key='B'),
      'K93863',
      'DNA B',
    ),
  })
# ---
# name: TestAssignRecordsToSegments.test_ok[438782]
  set({
    tuple(
      SegmentName(prefix='DNA', key='C'),
      'NC_907439',
      'DNA C',
    ),
    tuple(
      SegmentName(prefix='DNA', key='M'),
      'K93863',
      'DNA M',
    ),
    tuple(
      SegmentName(prefix='DNA', key='N'),
      'NC_314988',
      'DNA N',
    ),
    tuple(
      SegmentName(prefix='DNA', key='R'),
      'NC_934447',
      'DNA R',
    ),
    tuple(
      SegmentName(prefix='DNA', key='S'),
      'SJ404705',
      'DNA S',
    ),
    tuple(
      SegmentName(prefix='DNA', key='U3'),
      'OC344875',
      'DNA U3',
    ),
  })
# ---
# name: TestCreatePlanFromRecords.test_monopartite
  dict({
    'id': UUID,
    'segments': list([
      dict({
        'id': UUID,
        'length': 159,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'B',
          'prefix': 'RNA',
        }),
        'rule': 'required',
      }),
    ]),
  })
# ---
# name: TestCreatePlanFromRecords.test_multipartite
  dict({
    'id': UUID,
    'segments': list([
      dict({
        'id': UUID,
        'length': 1015,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'C',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
      dict({
        'id': UUID,
        'length': 1074,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'M',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
      dict({
        'id': UUID,
        'length': 1090,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'N',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
      dict({
        'id': UUID,
        'length': 1099,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'R',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
      dict({
        'id': UUID,
        'length': 1087,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'S',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
      dict({
        'id': UUID,
        'length': 1057,
        'length_tolerance': 0.03,
        'name': dict({
          'key': 'U3',
          'prefix': 'DNA',
        }),
        'rule': 'required',
      }),
    ]),
  })
# ---
